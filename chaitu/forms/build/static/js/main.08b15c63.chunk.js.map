{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","location","this","state","react_default","a","createElement","className","map","item","App_Design","key","title","Component","Design","_ref","style","display","justifyContent","distance","location_type","woeid","latt_long","defaultProps","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAGMA,mLACK,IACCC,EAAaC,KAAKC,MAAlBF,SACR,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8CAA0CF,EAAAC,EAAAC,cAAA,WACzCL,EAASO,IACR,SAAAC,GAAI,OAAIL,EAAAC,EAAAC,cAACI,EAAD,CAAQD,KAAMA,EAAME,IAAKF,EAAKG,kBAP9BC,aAcZC,EAAS,SAAAC,GAAc,IAAXN,EAAWM,EAAXN,KAChB,OAAOL,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,OAAKU,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAC7Cd,EAAAC,EAAAC,cAAA,yBADF,IAC0BF,EAAAC,EAAAC,cAAA,WAAMG,EAAKU,WAErCf,EAAAC,EAAAC,cAAA,OAAKU,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAC7Cd,EAAAC,EAAAC,cAAA,sBADF,IACuBF,EAAAC,EAAAC,cAAA,WAAMG,EAAKG,QAElCR,EAAAC,EAAAC,cAAA,OAAKU,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAC7Cd,EAAAC,EAAAC,cAAA,8BADF,IAC+BF,EAAAC,EAAAC,cAAA,WAAMG,EAAKW,gBAE1ChB,EAAAC,EAAAC,cAAA,OAAKU,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAC7Cd,EAAAC,EAAAC,cAAA,sBADF,IACuBF,EAAAC,EAAAC,cAAA,WAAMG,EAAKY,QAElCjB,EAAAC,EAAAC,cAAA,OAAKU,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAC7Cd,EAAAC,EAAAC,cAAA,0BADF,IAC2BF,EAAAC,EAAAC,cAAA,WAAMG,EAAKa,YAEtClB,EAAAC,EAAAC,cAAA,aAIJN,EAAIuB,aAAe,CACjBtB,SAAU,CACR,CAAEkB,SAAY,QAASP,MAAS,eAAgBQ,cAAiB,OAAQC,MAAS,QAASC,UAAa,yBACvG,CAAEH,SAAY,QAASP,MAAS,aAAcQ,cAAiB,OAAQC,MAAS,QAASC,UAAa,yBACtG,CAAEH,SAAY,QAASP,MAAS,UAAWQ,cAAiB,OAAQC,MAAS,QAASC,UAAa,wBACnG,CAAEH,SAAY,QAASP,MAAS,WAAYQ,cAAiB,OAAQC,MAAS,QAASC,UAAa,yBACpG,CAAEH,SAAY,QAASP,MAAS,YAAaQ,cAAiB,OAAQC,MAAS,QAASC,UAAa,yBACrG,CAAEH,SAAY,QAASP,MAAS,SAAUQ,cAAiB,OAAQC,MAAS,QAASC,UAAa,0BAClG,CAAEH,SAAY,QAASP,MAAS,WAAYQ,cAAiB,OAAQC,MAAS,QAASC,UAAa,yBACpG,CAAEH,SAAY,QAASP,MAAS,WAAYQ,cAAiB,OAAQC,MAAS,OAAQC,UAAa,yBACnG,CAAEH,SAAY,QAASP,MAAS,eAAgBQ,cAAiB,OAAQC,MAAS,OAAQC,UAAa,yBACvG,CAAEH,SAAY,QAASP,MAAS,QAASQ,cAAiB,OAAQC,MAAS,QAASC,UAAa,2BAMvFtB,QC3CKwB,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.08b15c63.chunk.js","sourcesContent":["import React, { Component, } from 'react';\n\n\nclass App extends Component {\n  render() {\n    const { location } = this.state\n    return (\n      <div className=\"App\">\n        <div>EXAMPLE dashboard visualisation</div><hr />\n        {location.map(\n          item => <Design item={item} key={item.title} />\n        )}\n      </div>\n    );\n  }\n}\n\nconst Design = ({ item }) => {\n  return <div>\n    <div style={{ display: \"flex\", justifyContent: \"start\" }}>\n      <label>distance</label> <div>{item.distance}</div>\n    </div>\n    <div style={{ display: \"flex\", justifyContent: \"start\" }}>\n      <label>title</label> <div>{item.title}</div>\n    </div>\n    <div style={{ display: \"flex\", justifyContent: \"start\" }}>\n      <label>location_type</label> <div>{item.location_type}</div>\n    </div>\n    <div style={{ display: \"flex\", justifyContent: \"start\" }}>\n      <label>woeid</label> <div>{item.woeid}</div>\n    </div>\n    <div style={{ display: \"flex\", justifyContent: \"start\" }}>\n      <label>latt_long</label> <div>{item.latt_long}</div>\n    </div>\n    <hr />\n  </div>\n}\n\nApp.defaultProps = {\n  location: [\n    { \"distance\": 4699513, \"title\": \"Christchurch\", \"location_type\": \"City\", \"woeid\": 2348327, \"latt_long\": \"-43.527519,172.635422\" },\n     { \"distance\": 4933881, \"title\": \"Wellington\", \"location_type\": \"City\", \"woeid\": 2351310, \"latt_long\": \"-41.283779,174.787979\" },\n     { \"distance\": 5409167, \"title\": \"Manukau\", \"location_type\": \"City\", \"woeid\": 2349386, \"latt_long\": \"-36.98967,174.881454\" },\n     { \"distance\": 5421570, \"title\": \"Auckland\", \"location_type\": \"City\", \"woeid\": 2348079, \"latt_long\": \"-36.884109,174.770416\" },\n     { \"distance\": 5563469, \"title\": \"Melbourne\", \"location_type\": \"City\", \"woeid\": 1103816, \"latt_long\": \"-37.817532,144.967148\" },\n     { \"distance\": 5940877, \"title\": \"Sydney\", \"location_type\": \"City\", \"woeid\": 1105779, \"latt_long\": \"-33.869629, 151.206955\" },\n     { \"distance\": 5945660, \"title\": \"Adelaide\", \"location_type\": \"City\", \"woeid\": 1099805, \"latt_long\": \"-34.926102,138.599884\" },\n     { \"distance\": 6193065, \"title\": \"Santiago\", \"location_type\": \"City\", \"woeid\": 349859, \"latt_long\": \"-33.463039,-70.647942\" },\n     { \"distance\": 6193892, \"title\": \"Buenos Aires\", \"location_type\": \"City\", \"woeid\": 468739, \"latt_long\": \"-34.608521,-58.373539\" },\n     { \"distance\": 6508311, \"title\": \"Perth\", \"location_type\": \"City\", \"woeid\": 1098081, \"latt_long\": \"-31.953020,115.857239\" }\n  ]\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}